# Production secrets - these should be managed by external secret management
apiVersion: v1
kind: Secret
metadata:
  name: production-app-secrets
  namespace: multimodal-platform-prod
  labels:
    app.kubernetes.io/name: multimodal-platform
    app.kubernetes.io/component: secrets
    environment: production
type: Opaque
data:
  # These are placeholder values - replace with actual production secrets
  # JWT_SECRET should be a strong, unique key
  JWT_SECRET: cHJvZHVjdGlvbi1qd3Qtc2VjcmV0LWNoYW5nZS1tZQ==
  
  # SSL certificates (if not using cert-manager)
  # TLS_CERT: LS0tLS1CRUdJTi...
  # TLS_KEY: LS0tLS1CRUdJTi...

---
apiVersion: v1
kind: Secret
metadata:
  name: production-postgres-secret
  namespace: multimodal-platform-prod
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: secrets
    environment: production
type: Opaque
data:
  # Strong production database password
  POSTGRES_PASSWORD: c3Ryb25nLXByb2R1Y3Rpb24tcGFzc3dvcmQ=
  DATABASE_URL: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnN0cm9uZy1wcm9kdWN0aW9uLXBhc3N3b3JkQHBvc3RncmVzLXNlcnZpY2U6NTQzMi9tdWx0aW1vZGFsX3BsYXRmb3Jt

---
# External secrets integration (if using external-secrets operator)
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: production-external-secrets
  namespace: multimodal-platform-prod
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: external-app-secrets
    creationPolicy: Owner
  data:
  - secretKey: JWT_SECRET
    remoteRef:
      key: multimodal-platform/jwt-secret
  - secretKey: POSTGRES_PASSWORD
    remoteRef:
      key: multimodal-platform/postgres-password