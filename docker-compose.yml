version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: multimodal-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-multimodal_platform}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multimodal-network

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: multimodal-redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multimodal-network

  # Frontend Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: multimodal-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://api-gateway:8080
      - NEXT_PUBLIC_WS_URL=ws://websocket-service:8081
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-multimodal_platform}
      - USE_DATABASE=${USE_DATABASE:-false}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
    depends_on:
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - multimodal-network

  # API Gateway
  api-gateway:
    build:
      context: ./backend
      dockerfile: api-gateway/Dockerfile
    container_name: multimodal-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    environment:
      - GIN_MODE=${GIN_MODE:-release}
      - PORT=8080
      - REDIS_ADDR=redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8082
      - USER_SERVICE_URL=http://user-service:8083
      - GAME_SERVICE_URL=http://game-service:8084
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - multimodal-network

  # WebSocket Service
  websocket-service:
    build:
      context: ./backend
      dockerfile: websocket-service/Dockerfile
    container_name: multimodal-websocket
    ports:
      - "${WEBSOCKET_PORT:-8081}:8081"
    environment:
      - GIN_MODE=${GIN_MODE:-release}
      - WS_PORT=8081
      - REDIS_ADDR=redis:6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - multimodal-network

  # Auth Service
  auth-service:
    build:
      context: ./backend
      dockerfile: auth-service/Dockerfile
    container_name: multimodal-auth
    ports:
      - "${AUTH_SERVICE_PORT:-8082}:8082"
    environment:
      - GIN_MODE=${GIN_MODE:-release}
      - PORT=8082
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-multimodal_platform}?sslmode=disable
      - REDIS_ADDR=redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - multimodal-network

  # User Service
  user-service:
    build:
      context: ./backend
      dockerfile: user-service/Dockerfile
    container_name: multimodal-user
    ports:
      - "${USER_SERVICE_PORT:-8083}:8083"
    environment:
      - GIN_MODE=${GIN_MODE:-release}
      - PORT=8083
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-multimodal_platform}?sslmode=disable
      - REDIS_ADDR=redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - multimodal-network

  # Game Service
  game-service:
    build:
      context: ./backend
      dockerfile: game-service/Dockerfile
    container_name: multimodal-game
    ports:
      - "${GAME_SERVICE_PORT:-8084}:8084"
    environment:
      - GIN_MODE=${GIN_MODE:-release}
      - PORT=8084
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-multimodal_platform}?sslmode=disable
      - REDIS_ADDR=redis:6379
      - WEBSOCKET_SERVICE_URL=http://websocket-service:8081
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - multimodal-network

  # Nginx Load Balancer (Production)
  nginx:
    image: nginx:alpine
    container_name: multimodal-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api-gateway
      - websocket-service
    restart: unless-stopped
    profiles:
      - production
    networks:
      - multimodal-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: multimodal-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    networks:
      - multimodal-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: multimodal-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    profiles:
      - monitoring
    networks:
      - multimodal-network

  # Development Services (for development profile)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: multimodal-frontend-dev
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugging port
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    profiles:
      - development
    networks:
      - multimodal-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  multimodal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16