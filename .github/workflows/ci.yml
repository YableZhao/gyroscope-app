name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend CI
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run type-check

    - name: Lint check
      run: npm run lint

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Build application
      run: npm run build

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next
        retention-days: 7

  # Backend CI
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./backend

    - name: Run tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
        REDIS_ADDR: localhost:6379
        JWT_SECRET: test-jwt-secret
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.out
        flags: backend
        name: backend-coverage

    - name: Build binaries
      run: |
        make build-all

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-binaries
        path: backend/bin/
        retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript, go

  # Docker build and push
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [frontend, api-gateway, websocket-service, auth-service, user-service, game-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Determine build context and dockerfile
      id: build-info
      run: |
        if [[ "${{ matrix.service }}" == "frontend" ]]; then
          echo "context=./frontend" >> $GITHUB_OUTPUT
          echo "dockerfile=./frontend/Dockerfile" >> $GITHUB_OUTPUT
        else
          echo "context=./backend" >> $GITHUB_OUTPUT
          echo "dockerfile=./backend/${{ matrix.service }}/Dockerfile" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ steps.build-info.outputs.context }}
        file: ${{ steps.build-info.outputs.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Kubernetes manifest validation
  k8s-validation:
    name: Kubernetes Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Validate Kubernetes manifests
      run: |
        # Validate base manifests
        kustomize build k8s/base > /tmp/base-manifests.yaml
        kubectl --dry-run=client apply -f /tmp/base-manifests.yaml
        
        # Validate overlays
        for env in development staging production; do
          echo "Validating $env environment..."
          kustomize build k8s/overlays/$env > /tmp/$env-manifests.yaml
          kubectl --dry-run=client apply -f /tmp/$env-manifests.yaml
        done

    - name: Lint Kubernetes manifests
      uses: instrumenta/kubeval-action@master
      with:
        files: k8s/

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: integration_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install test dependencies
      run: npm install -g newman

    - name: Run API integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/integration_test_db?sslmode=disable
        REDIS_ADDR: localhost:6379
        JWT_SECRET: integration-test-jwt-secret
      run: |
        # Start services in background (simplified for this example)
        echo "Integration tests would run here with actual service containers"
        # newman run tests/postman/api-tests.json --environment tests/postman/integration.json

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: test-results/
        retention-days: 7

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci, security-scan, docker-build, k8s-validation]
    if: always() && github.event_name == 'push'

    steps:
    - name: Notify success
      if: needs.frontend-ci.result == 'success' && needs.backend-ci.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ CI Pipeline passed for ${{ github.ref_name }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify failure
      if: needs.frontend-ci.result == 'failure' || needs.backend-ci.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ CI Pipeline failed for ${{ github.ref_name }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}