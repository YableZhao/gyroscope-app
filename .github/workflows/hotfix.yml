name: Hotfix Pipeline

on:
  push:
    branches: [hotfix/*]
  pull_request:
    branches: [main]
    types: [opened, synchronize]
    paths: ['hotfix/*']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Fast CI for hotfixes
  hotfix-ci:
    name: Hotfix CI
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Frontend quick checks
      run: |
        cd frontend
        npm run type-check
        npm run lint
        npm run build

    - name: Backend quick checks
      run: |
        cd backend
        go mod download
        go build -v ./...
        go test -short ./...

    - name: Security scan (critical only)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'

  # Build hotfix images
  build-hotfix:
    name: Build Hotfix Images
    runs-on: ubuntu-latest
    needs: [hotfix-ci]
    if: startsWith(github.ref, 'refs/heads/hotfix/')

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [frontend, api-gateway, websocket-service, auth-service, user-service, game-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract branch name
      id: branch
      run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: Build and push hotfix image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'frontend' && './frontend' || './backend' }}
        file: ${{ matrix.service == 'frontend' && './frontend/Dockerfile' || format('./backend/{0}/Dockerfile', matrix.service) }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ steps.branch.outputs.branch }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:hotfix-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Emergency deploy to production
  emergency-deploy:
    name: Emergency Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-hotfix]
    if: startsWith(github.ref, 'refs/heads/hotfix/')
    
    environment:
      name: emergency-production
      url: https://multimodal-platform.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

    - name: Create emergency backup
      run: |
        kubectl get all -n multimodal-platform-prod -o yaml > emergency-backup-$(date +%Y%m%d-%H%M%S).yaml

    - name: Extract branch name
      id: branch
      run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: Deploy hotfix
      run: |
        cd k8s/overlays/production
        
        # Update images to hotfix versions
        kustomize edit set image \
          multimodal-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.branch.outputs.branch }} \
          multimodal-api-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-gateway:${{ steps.branch.outputs.branch }} \
          multimodal-websocket-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-websocket-service:${{ steps.branch.outputs.branch }} \
          multimodal-auth-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-auth-service:${{ steps.branch.outputs.branch }} \
          multimodal-user-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-user-service:${{ steps.branch.outputs.branch }} \
          multimodal-game-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-game-service:${{ steps.branch.outputs.branch }}
        
        kustomize build . | kubectl apply -f -

    - name: Wait for hotfix deployment
      run: |
        kubectl rollout status deployment --all -n multimodal-platform-prod --timeout=600s

    - name: Verify hotfix
      run: |
        sleep 30
        PROD_URL=$(kubectl get ingress -n multimodal-platform-prod -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' || echo "multimodal-platform.com")
        curl -f https://$PROD_URL/api/health || exit 1

    - name: Notify emergency deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          ðŸš¨ EMERGENCY HOTFIX DEPLOYED ðŸš¨
          Branch: ${{ steps.branch.outputs.branch }}
          Commit: ${{ github.sha }}
          Status: ${{ job.status }}
          URL: https://multimodal-platform.com
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create incident tracking issue
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸš¨ Emergency Hotfix Deployed: ${context.ref.replace('refs/heads/', '')}`,
            body: `
              ## Emergency Hotfix Deployment
              
              **Branch:** ${context.ref.replace('refs/heads/', '')}
              **Commit:** ${context.sha}
              **Deployed by:** ${{ github.actor }}
              **Deployment time:** ${new Date().toISOString()}
              
              ## Required Follow-up Actions
              - [ ] Monitor production metrics for 24 hours
              - [ ] Create proper fix in main branch
              - [ ] Schedule post-incident review
              - [ ] Update documentation if needed
              - [ ] Create changelog entry
              
              ## Rollback Plan
              If issues occur, rollback using:
              \`\`\`bash
              kubectl rollout undo deployment --all -n multimodal-platform-prod
              \`\`\`
            `,
            labels: ['hotfix', 'production', 'emergency']
          })