name: CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [main]
    types: [completed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    
    environment:
      name: staging
      url: https://staging.multimodal-platform.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        kubectl config current-context

    - name: Update image tags
      run: |
        cd k8s/overlays/staging
        kustomize edit set image \
          multimodal-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:main-${{ github.sha }} \
          multimodal-api-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-gateway:main-${{ github.sha }} \
          multimodal-websocket-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-websocket-service:main-${{ github.sha }} \
          multimodal-auth-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-auth-service:main-${{ github.sha }} \
          multimodal-user-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-user-service:main-${{ github.sha }} \
          multimodal-game-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-game-service:main-${{ github.sha }}

    - name: Deploy to staging
      run: |
        kustomize build k8s/overlays/staging | kubectl apply -f -

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment --all -n multimodal-platform-staging --timeout=600s

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Get staging URL (assuming LoadBalancer or Ingress)
        STAGING_URL=$(kubectl get ingress -n multimodal-platform-staging -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' || echo "staging.multimodal-platform.com")
        
        # Basic health checks
        curl -f https://$STAGING_URL/api/health || exit 1
        curl -f https://$STAGING_URL/ || exit 1

    - name: Notify staging deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: "🚀 Staging deployment ${{ job.status }} - https://staging.multimodal-platform.com"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # E2E tests on staging
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Playwright
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps

    - name: Run E2E tests
      env:
        BASE_URL: https://staging.multimodal-platform.com
      run: |
        cd frontend
        npx playwright test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: frontend/test-results/
        retention-days: 7

  # Security scan on staging
  staging-security-scan:
    name: Staging Security Scan
    runs-on: ubuntu-latest
    needs: [deploy-staging]

    steps:
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://staging.multimodal-platform.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-scan-results
        path: report_html.html
        retention-days: 7

  # Production deployment approval
  production-approval:
    name: Production Approval
    runs-on: ubuntu-latest
    needs: [e2e-tests, staging-security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production-approval

    steps:
    - name: Request approval
      run: echo "Manual approval required for production deployment"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [production-approval]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: https://multimodal-platform.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        kubectl config current-context

    - name: Create backup
      run: |
        # Backup current deployment
        kubectl get all -n multimodal-platform-prod -o yaml > backup-$(date +%Y%m%d-%H%M%S).yaml
        
        # Upload backup to artifacts
        echo "BACKUP_FILE=backup-$(date +%Y%m%d-%H%M%S).yaml" >> $GITHUB_ENV

    - name: Update image tags for production
      run: |
        cd k8s/overlays/production
        
        # Use semantic version tag if available, otherwise use commit SHA
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION_TAG=${GITHUB_REF#refs/tags/}
        else
          VERSION_TAG="main-${{ github.sha }}"
        fi
        
        kustomize edit set image \
          multimodal-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:$VERSION_TAG \
          multimodal-api-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-gateway:$VERSION_TAG \
          multimodal-websocket-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-websocket-service:$VERSION_TAG \
          multimodal-auth-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-auth-service:$VERSION_TAG \
          multimodal-user-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-user-service:$VERSION_TAG \
          multimodal-game-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-game-service:$VERSION_TAG

    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        kustomize build k8s/overlays/production | kubectl apply -f -

    - name: Wait for deployment with timeout
      timeout-minutes: 15
      run: |
        kubectl rollout status deployment --all -n multimodal-platform-prod --timeout=900s

    - name: Verify deployment health
      run: |
        # Wait for all pods to be ready
        sleep 60
        
        # Check all pods are running
        kubectl get pods -n multimodal-platform-prod
        
        # Verify all deployments are ready
        if ! kubectl get deployments -n multimodal-platform-prod -o jsonpath='{.items[*].status.readyReplicas}' | grep -q '[^0 ]'; then
          echo "Some deployments are not ready"
          exit 1
        fi
        
        # Health check endpoints
        PROD_URL=$(kubectl get ingress -n multimodal-platform-prod -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' || echo "multimodal-platform.com")
        curl -f https://$PROD_URL/api/health || exit 1
        curl -f https://$PROD_URL/ || exit 1

    - name: Upload backup artifact
      uses: actions/upload-artifact@v4
      with:
        name: production-backup-${{ github.sha }}
        path: ${{ env.BACKUP_FILE }}
        retention-days: 30

    - name: Notify production deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🎉 Production deployment successful! https://multimodal-platform.com"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          - Automated release from main branch
          - Deployed to production at https://multimodal-platform.com
          
          ## Deployment Details
          - Commit: ${{ github.sha }}
          - Docker Images Tagged: ${{ github.ref_name }}
          - Kubernetes Namespace: multimodal-platform-prod
        draft: false
        prerelease: false

  # Rollback capability
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    
    environment:
      name: production-rollback

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

    - name: Rollback deployments
      run: |
        echo "Rolling back all deployments in production..."
        kubectl rollout undo deployment --all -n multimodal-platform-prod

    - name: Wait for rollback
      run: |
        kubectl rollout status deployment --all -n multimodal-platform-prod --timeout=600s

    - name: Verify rollback health
      run: |
        sleep 30
        PROD_URL=$(kubectl get ingress -n multimodal-platform-prod -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' || echo "multimodal-platform.com")
        curl -f https://$PROD_URL/api/health || exit 1

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        text: "⚠️ Production rollback completed due to deployment failure"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()

    steps:
    - name: Wait for metrics to populate
      run: sleep 120

    - name: Check key metrics
      run: |
        # This would integrate with your monitoring system
        # Example: Check error rates, response times, etc.
        echo "Monitoring production metrics..."
        
        # Placeholder for actual monitoring checks
        # Could integrate with Prometheus, Datadog, etc.
        # curl -f "https://prometheus.internal.com/api/v1/query?query=rate(http_requests_total{status=~\"5..\"}[5m])"

    - name: Alert if metrics are concerning
      run: |
        # Based on metrics, could trigger additional alerts
        echo "All metrics within normal range"